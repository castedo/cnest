#!/usr/bin/python3

import os, sys, pwd, subprocess, socket, yaml
from pathlib import Path

USER_SETUP_HOOK = '/usr/sbin/cnest-user-setup'
DEFAULT_PREF_PATH = Path.home() / ".config/cnest/homey-nest.yaml"

def parse_args():
    from argparse import ArgumentParser
    parser = ArgumentParser(description='Create user personalized container')
    parser.add_argument('nest_name', help="Nest name")
    parser.add_argument('-u', '--user', help="User (default current user)")
    parser.add_argument('-f', '--file', help="Preferences file")
    parser.add_argument('-b', '--base', help="Base repository")
    args = parser.parse_args()
    args.user = args.user or pwd.getpwuid(os.getuid()).pw_name
    if not args.file and os.path.exists(DEFAULT_PREF_PATH):
        args.file = DEFAULT_PREF_PATH
    prefs = dict()
    if args.file:
        with open(args.file) as f:
            prefs = yaml.load(f)
    args.home_mounts = prefs.get('home_mounts',[])
    args.base = args.base or prefs.get('base_repository')
    if not args.base:
        print("Base repository not specified", file=sys.stderr)
        parser.print_help()
        sys.exit(1)
    args.image = "localnests:" + args.nest_name
    return args

def run(args, **kwargs):
    print(" ".join(args))
    return subprocess.run(args, **kwargs)

def check_call(args):
    run(args, check=True)

def capture_output(args):
    proc = run(args, stdout=subprocess.PIPE, check=True)
    return proc.stdout.decode("utf-8").rstrip()

def build_image(args):
    base_image = args.base + ':' + args.nest_name
    tmp_container = capture_output([
            'buildah', '--log-level=info', 'from', base_image])
    try:
        cmd = ['buildah', 'run', tmp_container,
               'test', '-x', USER_SETUP_HOOK]
        if run(cmd, stderr=subprocess.DEVNULL).returncode == 0:
            subcmd = [USER_SETUP_HOOK]
        else:
            subcmd = ['useradd', '--create-home', '--user-group', '--uid']
        uid = pwd.getpwnam(args.user).pw_uid
        check_call(['buildah', 'run', tmp_container] +
            subcmd + [str(uid), args.user])
        check_call(['buildah', 'config',
            '--user', args.user, '--workingdir', str(Path.home()),
            tmp_container])
        check_call(['buildah', 'commit', tmp_container, args.image])
    finally:
        check_call(['buildah', 'rm', tmp_container])

def create_container(args):
    mounts = ['/tmp/.X11-unix']
    for hm in args.home_mounts:
        mounts.append(str(Path.home() / hm))
    volumes = ["--volume={0}:{0}".format(m) for m in mounts]
    check_call(['podman', 'create',
        '--userns=keep-id',
        '--pid=host',
        '--network=host',
        '--hostname', socket.gethostname(),
        '--user', args.user,
        '--name', args.nest_name] +
        volumes +
        [args.image, 'sleep', '+Inf'])

if __name__ == "__main__":
    args = parse_args()
    try:
        if run(['podman', 'image', 'exists', args.image]).returncode == 0:
            print("Skipping build of existing image:", args.image)
        else:
            build_image(args)
        create_container(args)
    except subprocess.CalledProcessError as ex:
        print("Error:", ex, file=sys.stderr)

